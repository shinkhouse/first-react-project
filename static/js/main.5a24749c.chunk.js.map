{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Toolbar","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","step","status","current","winner","moves","map","move","desc","key","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"iPAIA,SAASA,EAAOC,GACZ,OACI,4BAAQC,UAAU,SAASC,QAASF,EAAME,SACrCF,EAAMG,OAKnB,SAASC,IACL,OAAO,yBAAKH,UAAU,WAAf,e,IAGLI,E,2KACWC,GAAI,IAAD,OACZ,OAAO,kBAACP,EAAD,CAAQI,MAAOI,KAAKP,MAAMQ,QAAQF,GAAIJ,QAAS,kBAAM,EAAKF,MAAME,QAAQI,Q,+BAI/E,OACI,yBAAKL,UAAU,SACX,yBAAKA,UAAU,aACVM,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAEvB,yBAAKR,UAAU,aACVM,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAEvB,yBAAKR,UAAU,aACVM,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,S,GArBnBC,IAAMC,WA4BpBC,E,kDACF,WAAYZ,GAAQ,IAAD,8BACf,cAAMA,IACDa,MAAQ,CACTC,QAAS,CACL,CACIN,QAASO,MAAM,GAAGC,KAAK,QAG/BC,WAAY,EACZC,SAAS,GATE,E,wDAaPZ,GACR,IAAMQ,EAAUP,KAAKM,MAAMC,QAAQK,MAAM,EAAGZ,KAAKM,MAAMI,WAAa,GAE9DT,EADUM,EAAQA,EAAQM,OAAS,GACjBZ,QAAQW,QAC5BE,EAAgBb,IAAYA,EAAQF,KAIxCE,EAAQF,GAAKC,KAAKM,MAAMK,QAAU,IAAM,IACxCX,KAAKe,SAAS,CACVR,QAASA,EAAQS,OAAO,CACpB,CACIf,QAASA,KAGjBS,WAAYH,EAAQM,OACpBF,SAAUX,KAAKM,MAAMK,a,6BAItBM,GACHjB,KAAKe,SAAS,CACVL,WAAYO,EACZN,QAASM,EAAO,IAAM,M,+BAIpB,IAcFC,EAdC,OACCX,EAAUP,KAAKM,MAAMC,QACrBY,EAAUZ,EAAQP,KAAKM,MAAMI,YAC7BU,EAASN,EAAgBK,EAAQlB,SAEjCoB,EAAQd,EAAQe,KAAI,SAACL,EAAMM,GAC7B,IAAMC,EAAOD,EAAO,eAAiBA,EAAO,mBAC5C,OACI,wBAAIE,IAAKF,GACL,4BAAQ5B,QAAS,kBAAM,EAAK+B,OAAOH,KAAQC,OAYvD,OALIN,EADAE,EACS,WAAaA,EAEb,iBAAmBpB,KAAKM,MAAMK,QAAU,IAAM,KAIvD,yBAAKjB,UAAU,aACX,kBAACG,EAAD,MACA,yBAAKH,UAAU,QACX,yBAAKA,UAAU,cACX,kBAACI,EAAD,CAAOG,QAASkB,EAAQlB,QAASN,QAAS,SAACI,GAAD,OAAO,EAAK4B,YAAY5B,MAClE,yBAAKL,UAAU,eAAewB,IAElC,yBAAKxB,UAAU,aACX,4BAAK2B,U,GAvEVlB,IAAMC,WA+EzB,SAASU,EAAgBb,GAWrB,IAVA,IAAM2B,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEF7B,EAAI,EAAGA,EAAI6B,EAAMf,OAAQd,IAAK,CAAC,IAAD,cACjB6B,EAAM7B,GADW,GAC5B8B,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAEnC,GAAI9B,EAAQ4B,IAAM5B,EAAQ4B,KAAO5B,EAAQ6B,IAAM7B,EAAQ4B,KAAO5B,EAAQ8B,GAClE,OAAO9B,EAAQ4B,GAGvB,OAAO,KAIXG,IAASC,OAAO,kBAAC5B,EAAD,MAAU6B,SAASC,eAAe,W","file":"static/js/main.5a24749c.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n    return (\r\n        <button className=\"square\" onClick={props.onClick}>\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\nfunction Toolbar() {\r\n    return <div className=\"toolbar\">Tic-Tac-Toe</div>;\r\n}\r\n\r\nclass Board extends React.Component {\r\n    renderSquare(i) {\r\n        return <Square value={this.props.squares[i]} onClick={() => this.props.onClick(i)} />;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"board\">\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(0)}\r\n                    {this.renderSquare(1)}\r\n                    {this.renderSquare(2)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(3)}\r\n                    {this.renderSquare(4)}\r\n                    {this.renderSquare(5)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(6)}\r\n                    {this.renderSquare(7)}\r\n                    {this.renderSquare(8)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [\r\n                {\r\n                    squares: Array(9).fill(null),\r\n                },\r\n            ],\r\n            stepNumber: 0,\r\n            xIsNext: true,\r\n        };\r\n    }\r\n\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        if (calculateWinner(squares) || squares[i]) {\r\n            return;\r\n        }\r\n\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n            history: history.concat([\r\n                {\r\n                    squares: squares,\r\n                },\r\n            ]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext,\r\n        });\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: step % 2 === 0,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n\r\n        const moves = history.map((step, move) => {\r\n            const desc = move ? 'Go to move #' + move : 'Go to game start';\r\n            return (\r\n                <li key={move}>\r\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        let status;\r\n        if (winner) {\r\n            status = 'Winner: ' + winner;\r\n        } else {\r\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n        }\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <Toolbar></Toolbar>\r\n                <div className=\"game\">\r\n                    <div className=\"game-board\">\r\n                        <Board squares={current.squares} onClick={(i) => this.handleClick(i)} />\r\n                        <div className=\"game-status\">{status}</div>\r\n                    </div>\r\n                    <div className=\"game-info\">\r\n                        <ol>{moves}</ol>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return squares[a];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n// ========================================\r\nReactDOM.render(<Game />, document.getElementById('root'));\r\n"],"sourceRoot":""}